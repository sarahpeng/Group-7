G <- function(x, mu, Sigma, sigmaP2)
{ n<- length(mu)
c(mu + rep(x[n+1], n) + 2*x[n+2]*(Sigma %*% x[1:n]),
sum(x[1:n]) - 1,
t(x[1:n]) %*% Sigma %*% x[1:n] - sigmaP2)
}
DG <- function(x, mu, sigma, sigmaP2){
n <- length(mu)
grad <- matrix(0.0, n+2, n + 2)
grad[1:n, 1:n] <- 2*x[n+2]*sigma
grad[1:n, n+1] <- 1
grad[1:n, n+2] <- 2*(sigma %*% x[1:n])
grad[n+1, 1:n] <- 1
grad[n+2, 1:n] <- 2*t(x[1:n]) %*% sigma
grad
}
x <- c(rep(0.5, 5), 1, 1)
u <- rep(1, length(x))
while(sqrt(sum(u^2))/sqrt(sum(x^2)) > 1e-6) {
u <- solve(DG(x, mu, Sigma, sigmaP2),
G(x, mu, Sigma, sigmaP2))
x <- x-u
}
mu <- c(0.08, 0.10, 0.13, 0.15, 0.20)
sigmaP2 <- c(0.14, 0.18, 0.23, 0.25, 0.35)
Sigma <- matrix(c(0.0196, -0.0076, 0.0129, 0.0088, -0.0098,
-0.0076, 0.0324, -0.0041, -0.0090, 0.0095,
0.0129, -0.0041, 0.0529, 0.0201, 0.0201,
0.0088, -0.0090, 0.0201, 0.0625, -0.0131,
-0.0098, 0.0095, 0.0201, -0.0131, 0.1225),
5, 5, byrow=TRUE)
G <- function(x, mu, sigma, sigmaP2)
{ n<- length(mu)
c(mu + rep(x[n+1], n) + 2*x[n+2]*(sigma %*% x[1:n]),
sum(x[1:n]) - 1,
t(x[1:n]) %*% sigma %*% x[1:n] - sigmaP2)
}
DG <- function(x, mu, sigma, sigmaP2){
n <- length(mu)
grad <- matrix(0.0, n+2, n + 2)
grad[1:n, 1:n] <- 2*x[n+2]*sigma
grad[1:n, n+1] <- 1
grad[1:n, n+2] <- 2*(sigma %*% x[1:n])
grad[n+1, 1:n] <- 1
grad[n+2, 1:n] <- 2*t(x[1:n]) %*% sigma
grad
}
x <- c(rep(0.5, 5), 1, 1)
u <- rep(1, length(x))
while(sqrt(sum(u^2))/sqrt(sum(x^2)) > 1e-6) {
u <- solve(DG(x, mu, igma, sigmaP2),
G(x, mu, Sigma, sigmaP2))
x <- x-u
}
mu <- c(0.08, 0.10, 0.13, 0.15, 0.20)
sigmaP2 <- c(0.14, 0.18, 0.23, 0.25, 0.35)
Sigma <- matrix(c(0.0196, -0.0076, 0.0129, 0.0088, -0.0098,
-0.0076, 0.0324, -0.0041, -0.0090, 0.0095,
0.0129, -0.0041, 0.0529, 0.0201, 0.0201,
0.0088, -0.0090, 0.0201, 0.0625, -0.0131,
-0.0098, 0.0095, 0.0201, -0.0131, 0.1225),
5, 5, byrow=TRUE)
G <- function(x, mu, sigma, sigmaP2)
{ n<- length(mu)
c(mu + rep(x[n+1], n) + 2*x[n+2]*(sigma %*% x[1:n]),
sum(x[1:n]) - 1,
t(x[1:n]) %*% sigma %*% x[1:n] - sigmaP2)
}
DG <- function(x, mu, sigma, sigmaP2){
n <- length(mu)
grad <- matrix(0.0, n+2, n + 2)
grad[1:n, 1:n] <- 2*x[n+2]*sigma
grad[1:n, n+1] <- 1
grad[1:n, n+2] <- 2*(sigma %*% x[1:n])
grad[n+1, 1:n] <- 1
grad[n+2, 1:n] <- 2*t(x[1:n]) %*% sigma
grad
}
x <- c(rep(0.5, 5), 1, 1)
u <- rep(1, length(x))
while(sqrt(sum(u^2))/sqrt(sum(x^2)) > 1e-6) {
u <- solve(DG(x, mu, Sigma, sigmaP2),
G(x, mu, Sigma, sigmaP2))
x <- x-u
}
mu <- c(0.08, 0.10, 0.13, 0.15, 0.20)
sigmaP2 <- c(0.14, 0.18, 0.23, 0.25, 0.35)
Sigma <- matrix(c(0.0196, -0.0076, 0.0129, 0.0088, -0.0098,
-0.0076, 0.0324, -0.0041, -0.0090, 0.0095,
0.0129, -0.0041, 0.0529, 0.0201, 0.0201,
0.0088, -0.0090, 0.0201, 0.0625, -0.0131,
-0.0098, 0.0095, 0.0201, -0.0131, 0.1225),
5, 5, byrow=TRUE)
mu <- c(0.08, 0.10, 0.13, 0.15, 0.20)
sigmaP2 <- c(0.14, 0.18, 0.23, 0.25, 0.35)
Sigma <- matrix(c(0.0196, -0.0076, 0.0129, 0.0088, -0.0098,
-0.0076, 0.0324, -0.0041, -0.0090, 0.0095,
0.0129, -0.0041, 0.0529, 0.0201, 0.0201,
0.0088, -0.0090, 0.0201, 0.0625, -0.0131,
-0.0098, 0.0095, 0.0201, -0.0131, 0.1225),
5, 5, byrow=TRUE)
G <- function(x, mu, Sigma, sigmaP2)
{
n<- length(mu)
c(mu + rep(x[n+1], n) + 2*x[n+2]*(Sigma %*% x[1:n]),
sum(x[1:n]) - 1,
t(x[1:n]) %*% Sigma %*% x[1:n] - sigmaP2)
}
DG <- function(x, mu, Sigma, sigmaP2){
n <- length(mu)
grad <- matrix(0.0, n+2, n + 2)
grad[1:n, 1:n] <- 2*x[n+2]*Sigma
grad[1:n, n+1] <- 1
grad[1:n, n+2] <- 2*(Sigma %*% x[1:n])
grad[n+1, 1:n] <- 1
grad[n+2, 1:n] <- 2*t(x[1:n]) %*% Sigma
grad
}
x <- c(rep(0.5, 5), 1, 1)
u <- rep(1, length(x))
while(sqrt(sum(u^2)) / sqrt(sum(x^2)) > 1e-6) {
u <- solve(DG(x, mu, Sigma, sigmaP2),
G(x, mu, Sigma, sigmaP2))
x <- x-u
}
mu <- c(0.08, 0.10, 0.13, 0.15, 0.20)
sigmaP2 <- c(0.14, 0.18, 0.23, 0.25, 0.35)
Sigmaa <- matrix(c(0.0196, -0.0076, 0.0129, 0.0088, -0.0098,
-0.0076, 0.0324, -0.0041, -0.0090, 0.0095,
0.0129, -0.0041, 0.0529, 0.0201, 0.0201,
0.0088, -0.0090, 0.0201, 0.0625, -0.0131,
-0.0098, 0.0095, 0.0201, -0.0131, 0.1225),
5, 5, byrow=TRUE)
G <- function(x, mu, Sigma, sigmaP2)
{
n<- length(mu)
c(mu + rep(x[n+1], n) + 2*x[n+2]*(Sigma %*% x[1:n]),
sum(x[1:n]) - 1,
t(x[1:n]) %*% Sigma %*% x[1:n] - sigmaP2)
}
DG <- function(x, mu, Sigma, sigmaP2){
n <- length(mu)
grad <- matrix(0.0, n+2, n + 2)
grad[1:n, 1:n] <- 2*x[n+2]*Sigma
grad[1:n, n+1] <- 1
grad[1:n, n+2] <- 2*(Sigma %*% x[1:n])
grad[n+1, 1:n] <- 1
grad[n+2, 1:n] <- 2*t(x[1:n]) %*% Sigma
grad
}
x <- c(rep(0.5, 5), 1, 1)
x <- c(rep(0.5, 5), 1, 1)
u <- rep(1, length(x))
while(sqrt(sum(u^2)) / sqrt(sum(x^2)) > 1e-6) {
u <- solve(DG(x, mu, Sigmaa, sigmaP2),
G(x, mu, Sigmaa, sigmaP2))
x <- x-u
}
x1 = c(-0.27, -0.14,  1.61,  0.09,  0.00,  2.07,  0.56, -1.67, -0.51, -0.54)
x2 = c(-0.32,  0.20,  1.93,  0.54,  0.75,  1.77,  0.84, -0.29, -0.33,  0.17)
n = length(x1)
n = length(x1)
a = x1 - x2
mean_a = mean(a)
std_dev = sd(a)
val_1 = mean_a - 2.262 *std_dev/sqrt(n)    #  -0.73
val_2 = mean_a + 2.262 *std_dev/sqrt(n)    #  -0.073
plot(x1, x2)
#c:
y1 = c(-0.27, -0.14, 1.61, 0.09, 0.00, 2.07, 0.56, -1.67, -0.51, -0.54)
#c:
y1 = c(-0.27, -0.14, 1.61, 0.09, 0.00, 2.07, 0.56, -1.67, -0.51, -0.54)
y2 = c( 0.20 , 0.54, -0.33, 1.93, -0.32, 1.77, 0.75, 0.17, -0.29, 0.84)
n1 = length(y1)
n1 = length(y1)
n2 = length(y2)
mean_y1 = mean(y1)
mean_y2 = mean(y2)
std_dev1 = sd(y1)
std_dev2 = sd(y2)
std_error = sqrt(std_dev1^2/n1 + std_dev2^2/n2)
(mean_y1 - mean_y2) - 2.262 *std_error# -1.37
(mean_y1 - mean_y2) + 2.262*std_error #  +0.56
# lect_19_2:
data("mtcars")
force(mtcars)
x <- mtcars$cyl
y <- mtcars$qsec
# a:
t.test(x==4,x==2)
# a:
t.test(y[x==4],y[x==2])
x
y
# Set up
population <- rep(0, 100)
prevalences <- list(malaria = .3, hiv = .2)
disability_weights <- list(malaria = .2, hiv = .4)
data <- data.frame(id = 1:1000)
ylds <- function(population) {
# Simulate a set of cases and YLDs for each disease
population_length = length(population)
data$hiv_cases <- rbinom(population_length, 1, prevalences$hiv)
data$malaria_cases  <- rbinom(population_length, 1, prevalences$malaria)
# Compute unadjusted, adjusted YLDs: then return a list containing both values
data$hiv_ylds <- data$hiv_cases * disability_weights$hiv
data$malaria_ylds <- data$malaria_cases *disability_weights$malaria
for(i in 1:population_length) {
data$total_ylds[i] <- data$malaria_ylds[i] + data$hiv_ylds[i]
data$adjusted_ylds[i] <- 1 - (1 - data$malaria_ylds[i]) * (1 - data$hiv_ylds[i])
}
x = list(sum(data$total_ylds), sum(data$adjusted_ylds))
return(x)
}
# Pass your `population` variable to your function
test_function <- ylds(population)
# To show the variation in results, run your function 1000 times
# and keep track of the unadjusted and adjusted values
all_unadjusted <- list()
adjusted <- list()
for(i in 1:1000) {
temp = comorbid_ylds(population)
all_unadjusted[[i]] <- temp[[1]]
adjusted[[i]] <- temp[[2]]
}
for(i in 1:1000) {
temp = ylds(population)
all_unadjusted[[i]] <- temp[[1]]
adjusted[[i]] <- temp[[2]]
}
all_unadjusted <- as.numeric(all_unadjusted)
# Graph variation in results (histogram of all_unadjusted)
jpeg('unadjusted.jpeg')
hist(all_unadjusted)
# Save your plot into a folder `charts/`
# Create a histogram of the ratio of the adjusted to unadjusted values
ratio <- unadjusted / as.numeric(adjusted)
hist(all_unadjusted)
# Graph variation in results (histogram of all_unadjusted)
jpeg('unadjusted.jpeg')
hist(all_unadjusted)
# Save your plot into a folder `charts/`
# Create a histogram of the ratio of the adjusted to unadjusted values
ratio <- all_unadjusted / as.numeric(adjusted)
jpeg('ratio.jpeg')
View(adjusted)
# Set up
population <- rep(0, 100)
prevalences <- list(malaria = .3, hiv = .2)
disability_weights <- list(malaria = .2, hiv = .4)
data <- data.frame(id = 1:1000)
ylds <- function(population) {
# Simulate a set of cases and YLDs for each disease
population_length = length(population)
data$hiv_cases <- rbinom(population_length, 1, prevalences$hiv)
data$malaria_cases  <- rbinom(population_length, 1, prevalences$malaria)
# Compute unadjusted, adjusted YLDs: then return a list containing both values
data$hiv_ylds <- data$hiv_cases * disability_weights$hiv
data$malaria_ylds <- data$malaria_cases *disability_weights$malaria
for(i in 1:population_length) {
data$total_ylds[i] <- data$malaria_ylds[i] + data$hiv_ylds[i]
data$adjusted_ylds[i] <- 1 - (1 - data$malaria_ylds[i]) * (1 - data$hiv_ylds[i])
}
x = list(sum(data$total_ylds), sum(data$adjusted_ylds))
return(x)
}
# Pass your `population` variable to your function
test_function <- ylds(population)
# To show the variation in results, run your function 1000 times
# and keep track of the unadjusted and adjusted values
all_unadjusted <- list()
adjusted <- list()
for(i in 1:1000) {
temp = ylds(population)
all_unadjusted[[i]] <- temp[[1]]
adjusted[[i]] <- temp[[2]]
}
all_unadjusted <- as.numeric(all_unadjusted)
# Graph variation in results (histogram of all_unadjusted)
jpeg('unadjusted.jpeg')
hist(all_unadjusted)
hist(all_unadjusted)
# Graph variation in results (histogram of all_unadjusted)
jpeg('all_unadjusted.jpeg')
hist(all_unadjusted)
# Graph variation in results (histogram of all_unadjusted)
jpeg('all_unadjusted.jpeg')
hist(all_unadjusted)
ggplot(all_unadjusted) +
geom_histogram(binwidth=1)
# Graph variation in results (histogram of all_unadjusted)
library(ggplot)
# Graph variation in results (histogram of all_unadjusted)
library(ggplot2)
ggplot(all_unadjusted, aes(x=weight)) +
geom_histogram(binwidth=1)
# To show the variation in results, run your function 1000 times
# and keep track of the unadjusted and adjusted values
all_unadjusted <- list()
adjusted <- list()
for(i in 1:1000) {
temp = ylds(population)
all_unadjusted[[i]] <- temp[[1]]
adjusted[[i]] <- temp[[2]]
}
# Graph variation in results (histogram of all_unadjusted)
library(ggplot2)
ggplot(all_unadjusted, aes(x=weight)) +
geom_histogram(binwidth=1)
# Save your plot into a folder `charts/`
# Create a histogram of the ratio of the adjusted to unadjusted values
ratio <- all_unadjusted / as.numeric(adjusted)
all_unadjusted <- do.call(rbind.data.frame, all_unadjusted)
# Graph variation in results (histogram of all_unadjusted)
library(ggplot2)
ggplot(all_unadjusted, aes(x=weight)) +
geom_histogram(binwidth=1)
View(all_unadjusted)
ggplot(all_unadjusted) +
geom_histogram(binwidth=1)
ggplot(all_unadjusted) +
geom_histogram(binwidth=1)
# Graph variation in results (histogram of all_unadjusted)
library(ggplot2)
ggplot(all_unadjusted, aes(x=weight)) +
geom_histogram(binwidth=1)
for(i in 1:1000) {
temp = ylds(population)
all_unadjusted[[i]] <- temp[[1]]
adjusted[[i]] <- temp[[2]]
}
all_unadjusted <- as.numeric(all_unadjusted)
all_unadjusted <- do.call(rbind.data.frame, all_unadjusted)
colnames(all_unadjusted) <- c("data")
# Graph variation in results (histogram of all_unadjusted)
library(ggplot2)
ggplot(all_unadjusted, aes(x=data)) +
geom_histogram(binwidth=1)
library(dplyr)
library(ggplot2)
library(magrittr)
install.packages("ggplot2")
install.packages("ggplot2")
living_vs_deceased <- read.csv(file = 'all_donor_data.csv')
setwd("~/personal_projects/for_sarah/eda")
living_vs_deceased <- read.csv(file = 'all_donor_data.csv')
donor_data <- read.csv(file = 'all_donor_data.csv')
donor_data
df = subset(donor_data, select = -c(To.Date,X2020) )
df
len(df)
df.shape
df.shape()
shape(df)
View(df)
df[, "max"] <- apply(df[, 1:33], 1, max)
df[, "max"] <- apply(df[, 2:33], 1, max)
df$max <- do.call(pmax, df[2:33])
df$max <- do.call(pmax, df[2:33], list(na.rm=TRUE)))
df$max <- do.call(pmax, df[2:33], list(na.rm=TRUE))
df$max <- do.call(pmax, df[2:33])
warnings()
donor_data <- read.csv(file = 'all_donor_data.csv')
donor_data
donor_data$Range
plot2 <- ggplot(data=donor_data, aes(x=Age.Group, y=Range)) +
xlab("Gender of Donors") + ylab("Number of Donors") + ggtitle("Male vs. Female Donors") +
geom_bar(stat="identity", fill="steelblue")
plot2
plot2 <- ggplot(data=donor_data, aes(x=Age.Group, y=Range)) +
xlab("Age Group of Donors") + ylab("Range of Donators") + ggtitle("") +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot2
do.call(pmax, c(df[2:32], list(na.rm=TRUE)))
df$max1 <- do.call(pmax, c(df[2:32], list(na.rm=TRUE)))
View(df)
donor_data <- read.csv(file = 'all_donor_data.csv')
plot2 <- ggplot(data=donor_data, aes(x=Age.Group, y=Range)) +
xlab("Age Group of Donors") + ylab("Range of Donators") + ggtitle("") +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot2
df$max1 <- do.call(pmax, c(df[2:32], list(na.rm=TRUE)))
View(df)
donor_data <- read.csv(file = 'all_donor_data.csv')
df <- read.csv(file = 'all_donor_data.csv')
plot2 <- ggplot(data=df, aes(x=Age.Group, y=Range)) +
xlab("Age Group of Donors") + ylab("Range of Donators") + ggtitle("") +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot2
df$max1 <- do.call(pmax, c(df[2:32], list(na.rm=TRUE)))
View(df)
df$max1 <- apply(df[, 2:26], 1, max)
View(df)
df$max1 <- apply(df[, 2:33], 1, max)
View(df)
df$max1 <- apply(df[, 2:33], 1, max)
View(df)
df[, c(2:33)] <- sapply(df[, c(2:33)], as.numeric)
View(df)
df <- read.csv(file = 'all_donor_data.csv')
plot2 <- ggplot(data=df, aes(x=Age.Group, y=Range)) +
xlab("Age Group of Donors") + ylab("Range of Donators") + ggtitle("") +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot2
df$max1 <- apply(df[, 2:33], 1, max)
View(df)
View(df)
t(df)
t_df <- t(df)
View(t_df)
header.true <- function(df) {
names(df) <- as.character(unlist(df[1,]))
df[-1,]
}
header.true((t_df))
max(t_df['< 1 Years'], na.rm = TRUE)
max(t_df['< 1 Year'], na.rm = TRUE)
max(t_df$<1Year, na.rm = TRUE)
t_df <- t(df)
header.true <- function(df) {
names(df) <- as.character(unlist(df[1,]))
df[-1,]
}
header.true((t_df))
t_df <- header.true((t_df))
t_df <- t(df)
header.true <- function(df) {
names(df) <- as.character(unlist(df[1,]))
df[-1,]
}
header.true((t_df))
df <- read.csv(file = 'all_donor_data.csv')
plot2 <- ggplot(data=df, aes(x=Age.Group, y=Range)) +
xlab("Age Group of Donors") + ylab("Range of Donators") + ggtitle("") +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot2
df[, c(2:33)] <- sapply(dat[, c(2:33)], as.numeric)
df$max1 <- apply(df[, 2:33], 1, max)
t_df <- t(df)
header.true <- function(df) {
names(df) <- as.character(unlist(df[1,]))
df[-1,]
}
header.true(t_df)
df$max1 <- apply(df[, 2:33], 1, max)
df$max2 <-apply(X=df, MARGIN=1, FUN=max)
df$max2 <-apply(X=df, MARGIN=2, FUN=max)
df$max2 <-apply(X=df, MARGIN=1, FUN=max)
df$max3 <- do.call(`pmax`, df)
apply(df, 1, FUN=min)
df[, c(2:33)] <- sapply(dat[, c(2:33)], as.numeric)
df[, c(2:33)] <- sapply(df[, c(2:33)], as.numeric)
df <- read.csv(file = 'all_donor_data.csv')
df <- read.csv(file = 'all_donor_data.csv')
df$max2 <-apply(X=df, MARGIN=1, FUN=max)
plot2
df[, c(2:33)] <- sapply(dat[, c(2:33)], as.numeric)
df$max2 <-apply(X=df, MARGIN=1, FUN=max)
df$max1 <- apply(df[, 2:33], 1, max)
df$max1 <- apply(df[, 2:34], 1, max)
df$min1 <- apply(df[, 2:34], 1, min)
-
# drop 2020 column b/c of incomplete data
df = subset(df, select = -c(X2020) )
# drop 2020 column b/c of incomplete data
df <- subset(df, select = -c(X2020))
df$max1 <- apply(df[, 2:33], 1, max)
df$min1 <- apply(df[, 2:33], 1, min)
df$range1 <- df$max1 - df$min1
df <- read.csv(file = 'all_donor_data.csv')
# convert to numeric
df[, c(2:33)] <- sapply(dat[, c(2:33)], as.numeric)
# convert to numeric
df[, c(2:33)] <- sapply(df[, c(2:33)], as.numeric)
# drop 2020 column b/c of incomplete data
df <- subset(df, select = -c(X2020))
# get max, min and find range
df$max <- apply(df[, 2:33], 1, max)
df$min <- apply(df[, 2:33], 1, min)
df$range <- df$max - df$min
plot2 <- ggplot(data=df, aes(x=Age.Group, y=Range)) +
xlab("Age Group of Donors") + ylab("Range of Donators") + ggtitle("") +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot2
plot2 <- ggplot(data=df, aes(x=Age.Group, y=range)) +
xlab("Age Group of Donors") + ylab("Range of Donators") + ggtitle("") +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot2
df <- df[-c("All Ages"), ]
df <- df[-c(All Ages), ]
df = df[-c(1),]
# get max, min and find range
df$max <- apply(df[, 2:33], 1, max)
df$min <- apply(df[, 2:33], 1, min)
df$range <- df$max - df$min
plot2 <- ggplot(data=df, aes(x=Age.Group, y=range)) +
xlab("Age Group of Donors") + ylab("Range of Donators") + ggtitle("") +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot2
plot2 <- ggplot(data=df, aes(x=Age.Group, y=range)) +
xlab("Age Group of Donors") + ylab("Range of Donators") + ggtitle("Range of Donators vs. Age Group of Donors") +
geom_bar(stat="identity", fill="steelblue") +
theme(axis.text.x = element_text(angle = 60, hjust = 1))
plot2
